/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-04-24")
public class REQ implements org.apache.thrift.TBase<REQ, REQ._Fields>, java.io.Serializable, Cloneable, Comparable<REQ> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("REQ");

  private static final org.apache.thrift.protocol.TField OP_FIELD_DESC = new org.apache.thrift.protocol.TField("OP", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Filename", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("Content", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CLIENT_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ClientIP", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CLIENT_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("ClientPort", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NUM_OF_OPS_SENT_FIELD_DESC = new org.apache.thrift.protocol.TField("NumOfOpsSent", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new REQStandardSchemeFactory());
    schemes.put(TupleScheme.class, new REQTupleSchemeFactory());
  }

  public String OP; // required
  public String Filename; // required
  public String Content; // required
  public String ClientIP; // required
  public String ClientPort; // required
  public long NumOfOpsSent; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OP((short)1, "OP"),
    FILENAME((short)2, "Filename"),
    CONTENT((short)3, "Content"),
    CLIENT_IP((short)4, "ClientIP"),
    CLIENT_PORT((short)5, "ClientPort"),
    NUM_OF_OPS_SENT((short)6, "NumOfOpsSent");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OP
          return OP;
        case 2: // FILENAME
          return FILENAME;
        case 3: // CONTENT
          return CONTENT;
        case 4: // CLIENT_IP
          return CLIENT_IP;
        case 5: // CLIENT_PORT
          return CLIENT_PORT;
        case 6: // NUM_OF_OPS_SENT
          return NUM_OF_OPS_SENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMOFOPSSENT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OP, new org.apache.thrift.meta_data.FieldMetaData("OP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILENAME, new org.apache.thrift.meta_data.FieldMetaData("Filename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("Content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_IP, new org.apache.thrift.meta_data.FieldMetaData("ClientIP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_PORT, new org.apache.thrift.meta_data.FieldMetaData("ClientPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_OF_OPS_SENT, new org.apache.thrift.meta_data.FieldMetaData("NumOfOpsSent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(REQ.class, metaDataMap);
  }

  public REQ() {
  }

  public REQ(
    String OP,
    String Filename,
    String Content,
    String ClientIP,
    String ClientPort,
    long NumOfOpsSent)
  {
    this();
    this.OP = OP;
    this.Filename = Filename;
    this.Content = Content;
    this.ClientIP = ClientIP;
    this.ClientPort = ClientPort;
    this.NumOfOpsSent = NumOfOpsSent;
    setNumOfOpsSentIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public REQ(REQ other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOP()) {
      this.OP = other.OP;
    }
    if (other.isSetFilename()) {
      this.Filename = other.Filename;
    }
    if (other.isSetContent()) {
      this.Content = other.Content;
    }
    if (other.isSetClientIP()) {
      this.ClientIP = other.ClientIP;
    }
    if (other.isSetClientPort()) {
      this.ClientPort = other.ClientPort;
    }
    this.NumOfOpsSent = other.NumOfOpsSent;
  }

  public REQ deepCopy() {
    return new REQ(this);
  }

  @Override
  public void clear() {
    this.OP = null;
    this.Filename = null;
    this.Content = null;
    this.ClientIP = null;
    this.ClientPort = null;
    setNumOfOpsSentIsSet(false);
    this.NumOfOpsSent = 0;
  }

  public String getOP() {
    return this.OP;
  }

  public REQ setOP(String OP) {
    this.OP = OP;
    return this;
  }

  public void unsetOP() {
    this.OP = null;
  }

  /** Returns true if field OP is set (has been assigned a value) and false otherwise */
  public boolean isSetOP() {
    return this.OP != null;
  }

  public void setOPIsSet(boolean value) {
    if (!value) {
      this.OP = null;
    }
  }

  public String getFilename() {
    return this.Filename;
  }

  public REQ setFilename(String Filename) {
    this.Filename = Filename;
    return this;
  }

  public void unsetFilename() {
    this.Filename = null;
  }

  /** Returns true if field Filename is set (has been assigned a value) and false otherwise */
  public boolean isSetFilename() {
    return this.Filename != null;
  }

  public void setFilenameIsSet(boolean value) {
    if (!value) {
      this.Filename = null;
    }
  }

  public String getContent() {
    return this.Content;
  }

  public REQ setContent(String Content) {
    this.Content = Content;
    return this;
  }

  public void unsetContent() {
    this.Content = null;
  }

  /** Returns true if field Content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.Content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.Content = null;
    }
  }

  public String getClientIP() {
    return this.ClientIP;
  }

  public REQ setClientIP(String ClientIP) {
    this.ClientIP = ClientIP;
    return this;
  }

  public void unsetClientIP() {
    this.ClientIP = null;
  }

  /** Returns true if field ClientIP is set (has been assigned a value) and false otherwise */
  public boolean isSetClientIP() {
    return this.ClientIP != null;
  }

  public void setClientIPIsSet(boolean value) {
    if (!value) {
      this.ClientIP = null;
    }
  }

  public String getClientPort() {
    return this.ClientPort;
  }

  public REQ setClientPort(String ClientPort) {
    this.ClientPort = ClientPort;
    return this;
  }

  public void unsetClientPort() {
    this.ClientPort = null;
  }

  /** Returns true if field ClientPort is set (has been assigned a value) and false otherwise */
  public boolean isSetClientPort() {
    return this.ClientPort != null;
  }

  public void setClientPortIsSet(boolean value) {
    if (!value) {
      this.ClientPort = null;
    }
  }

  public long getNumOfOpsSent() {
    return this.NumOfOpsSent;
  }

  public REQ setNumOfOpsSent(long NumOfOpsSent) {
    this.NumOfOpsSent = NumOfOpsSent;
    setNumOfOpsSentIsSet(true);
    return this;
  }

  public void unsetNumOfOpsSent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMOFOPSSENT_ISSET_ID);
  }

  /** Returns true if field NumOfOpsSent is set (has been assigned a value) and false otherwise */
  public boolean isSetNumOfOpsSent() {
    return EncodingUtils.testBit(__isset_bitfield, __NUMOFOPSSENT_ISSET_ID);
  }

  public void setNumOfOpsSentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMOFOPSSENT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OP:
      if (value == null) {
        unsetOP();
      } else {
        setOP((String)value);
      }
      break;

    case FILENAME:
      if (value == null) {
        unsetFilename();
      } else {
        setFilename((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case CLIENT_IP:
      if (value == null) {
        unsetClientIP();
      } else {
        setClientIP((String)value);
      }
      break;

    case CLIENT_PORT:
      if (value == null) {
        unsetClientPort();
      } else {
        setClientPort((String)value);
      }
      break;

    case NUM_OF_OPS_SENT:
      if (value == null) {
        unsetNumOfOpsSent();
      } else {
        setNumOfOpsSent((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OP:
      return getOP();

    case FILENAME:
      return getFilename();

    case CONTENT:
      return getContent();

    case CLIENT_IP:
      return getClientIP();

    case CLIENT_PORT:
      return getClientPort();

    case NUM_OF_OPS_SENT:
      return getNumOfOpsSent();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OP:
      return isSetOP();
    case FILENAME:
      return isSetFilename();
    case CONTENT:
      return isSetContent();
    case CLIENT_IP:
      return isSetClientIP();
    case CLIENT_PORT:
      return isSetClientPort();
    case NUM_OF_OPS_SENT:
      return isSetNumOfOpsSent();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof REQ)
      return this.equals((REQ)that);
    return false;
  }

  public boolean equals(REQ that) {
    if (that == null)
      return false;

    boolean this_present_OP = true && this.isSetOP();
    boolean that_present_OP = true && that.isSetOP();
    if (this_present_OP || that_present_OP) {
      if (!(this_present_OP && that_present_OP))
        return false;
      if (!this.OP.equals(that.OP))
        return false;
    }

    boolean this_present_Filename = true && this.isSetFilename();
    boolean that_present_Filename = true && that.isSetFilename();
    if (this_present_Filename || that_present_Filename) {
      if (!(this_present_Filename && that_present_Filename))
        return false;
      if (!this.Filename.equals(that.Filename))
        return false;
    }

    boolean this_present_Content = true && this.isSetContent();
    boolean that_present_Content = true && that.isSetContent();
    if (this_present_Content || that_present_Content) {
      if (!(this_present_Content && that_present_Content))
        return false;
      if (!this.Content.equals(that.Content))
        return false;
    }

    boolean this_present_ClientIP = true && this.isSetClientIP();
    boolean that_present_ClientIP = true && that.isSetClientIP();
    if (this_present_ClientIP || that_present_ClientIP) {
      if (!(this_present_ClientIP && that_present_ClientIP))
        return false;
      if (!this.ClientIP.equals(that.ClientIP))
        return false;
    }

    boolean this_present_ClientPort = true && this.isSetClientPort();
    boolean that_present_ClientPort = true && that.isSetClientPort();
    if (this_present_ClientPort || that_present_ClientPort) {
      if (!(this_present_ClientPort && that_present_ClientPort))
        return false;
      if (!this.ClientPort.equals(that.ClientPort))
        return false;
    }

    boolean this_present_NumOfOpsSent = true;
    boolean that_present_NumOfOpsSent = true;
    if (this_present_NumOfOpsSent || that_present_NumOfOpsSent) {
      if (!(this_present_NumOfOpsSent && that_present_NumOfOpsSent))
        return false;
      if (this.NumOfOpsSent != that.NumOfOpsSent)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_OP = true && (isSetOP());
    list.add(present_OP);
    if (present_OP)
      list.add(OP);

    boolean present_Filename = true && (isSetFilename());
    list.add(present_Filename);
    if (present_Filename)
      list.add(Filename);

    boolean present_Content = true && (isSetContent());
    list.add(present_Content);
    if (present_Content)
      list.add(Content);

    boolean present_ClientIP = true && (isSetClientIP());
    list.add(present_ClientIP);
    if (present_ClientIP)
      list.add(ClientIP);

    boolean present_ClientPort = true && (isSetClientPort());
    list.add(present_ClientPort);
    if (present_ClientPort)
      list.add(ClientPort);

    boolean present_NumOfOpsSent = true;
    list.add(present_NumOfOpsSent);
    if (present_NumOfOpsSent)
      list.add(NumOfOpsSent);

    return list.hashCode();
  }

  @Override
  public int compareTo(REQ other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOP()).compareTo(other.isSetOP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OP, other.OP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilename()).compareTo(other.isSetFilename());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilename()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Filename, other.Filename);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Content, other.Content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientIP()).compareTo(other.isSetClientIP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientIP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ClientIP, other.ClientIP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientPort()).compareTo(other.isSetClientPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ClientPort, other.ClientPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumOfOpsSent()).compareTo(other.isSetNumOfOpsSent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumOfOpsSent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NumOfOpsSent, other.NumOfOpsSent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("REQ(");
    boolean first = true;

    sb.append("OP:");
    if (this.OP == null) {
      sb.append("null");
    } else {
      sb.append(this.OP);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Filename:");
    if (this.Filename == null) {
      sb.append("null");
    } else {
      sb.append(this.Filename);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Content:");
    if (this.Content == null) {
      sb.append("null");
    } else {
      sb.append(this.Content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ClientIP:");
    if (this.ClientIP == null) {
      sb.append("null");
    } else {
      sb.append(this.ClientIP);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ClientPort:");
    if (this.ClientPort == null) {
      sb.append("null");
    } else {
      sb.append(this.ClientPort);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("NumOfOpsSent:");
    sb.append(this.NumOfOpsSent);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class REQStandardSchemeFactory implements SchemeFactory {
    public REQStandardScheme getScheme() {
      return new REQStandardScheme();
    }
  }

  private static class REQStandardScheme extends StandardScheme<REQ> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, REQ struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.OP = iprot.readString();
              struct.setOPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILENAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Filename = iprot.readString();
              struct.setFilenameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CLIENT_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ClientIP = iprot.readString();
              struct.setClientIPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLIENT_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ClientPort = iprot.readString();
              struct.setClientPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NUM_OF_OPS_SENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.NumOfOpsSent = iprot.readI64();
              struct.setNumOfOpsSentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, REQ struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.OP != null) {
        oprot.writeFieldBegin(OP_FIELD_DESC);
        oprot.writeString(struct.OP);
        oprot.writeFieldEnd();
      }
      if (struct.Filename != null) {
        oprot.writeFieldBegin(FILENAME_FIELD_DESC);
        oprot.writeString(struct.Filename);
        oprot.writeFieldEnd();
      }
      if (struct.Content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.Content);
        oprot.writeFieldEnd();
      }
      if (struct.ClientIP != null) {
        oprot.writeFieldBegin(CLIENT_IP_FIELD_DESC);
        oprot.writeString(struct.ClientIP);
        oprot.writeFieldEnd();
      }
      if (struct.ClientPort != null) {
        oprot.writeFieldBegin(CLIENT_PORT_FIELD_DESC);
        oprot.writeString(struct.ClientPort);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_OF_OPS_SENT_FIELD_DESC);
      oprot.writeI64(struct.NumOfOpsSent);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class REQTupleSchemeFactory implements SchemeFactory {
    public REQTupleScheme getScheme() {
      return new REQTupleScheme();
    }
  }

  private static class REQTupleScheme extends TupleScheme<REQ> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, REQ struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOP()) {
        optionals.set(0);
      }
      if (struct.isSetFilename()) {
        optionals.set(1);
      }
      if (struct.isSetContent()) {
        optionals.set(2);
      }
      if (struct.isSetClientIP()) {
        optionals.set(3);
      }
      if (struct.isSetClientPort()) {
        optionals.set(4);
      }
      if (struct.isSetNumOfOpsSent()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetOP()) {
        oprot.writeString(struct.OP);
      }
      if (struct.isSetFilename()) {
        oprot.writeString(struct.Filename);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.Content);
      }
      if (struct.isSetClientIP()) {
        oprot.writeString(struct.ClientIP);
      }
      if (struct.isSetClientPort()) {
        oprot.writeString(struct.ClientPort);
      }
      if (struct.isSetNumOfOpsSent()) {
        oprot.writeI64(struct.NumOfOpsSent);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, REQ struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.OP = iprot.readString();
        struct.setOPIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Filename = iprot.readString();
        struct.setFilenameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ClientIP = iprot.readString();
        struct.setClientIPIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ClientPort = iprot.readString();
        struct.setClientPortIsSet(true);
      }
      if (incoming.get(5)) {
        struct.NumOfOpsSent = iprot.readI64();
        struct.setNumOfOpsSentIsSet(true);
      }
    }
  }

}

